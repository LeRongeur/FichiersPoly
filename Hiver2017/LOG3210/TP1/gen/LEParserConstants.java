/* Generated By:JJTree&JavaCC: Do not edit this line. LEParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LEParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int DECL_TYPES = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int BOOL = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int STRING = 16;
  /** RegularExpression Id. */
  int ASSIGN_OPERATORS = 17;
  /** RegularExpression Id. */
  int COMPARISON_OPERATORS = 18;
  /** RegularExpression Id. */
  int PLUS = 19;
  /** RegularExpression Id. */
  int MINUS = 20;
  /** RegularExpression Id. */
  int EQUAL = 21;
  /** RegularExpression Id. */
  int LPAREN = 22;
  /** RegularExpression Id. */
  int RPAREN = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int PLUS_EQUAL = 26;
  /** RegularExpression Id. */
  int MINUS_EQUAL = 27;
  /** RegularExpression Id. */
  int DIVISION_EQUAL = 28;
  /** RegularExpression Id. */
  int MULTIPLICATION_EQUAL = 29;
  /** RegularExpression Id. */
  int PUISSANCE_EQUAL = 30;
  /** RegularExpression Id. */
  int PLUSPETIT = 31;
  /** RegularExpression Id. */
  int PLUSPETIT_EQUAL = 32;
  /** RegularExpression Id. */
  int PLUSGRAND = 33;
  /** RegularExpression Id. */
  int PLUSGRAND_EQUAL = 34;
  /** RegularExpression Id. */
  int EQUAL_EQUAL = 35;
  /** RegularExpression Id. */
  int NOT_EQUAL = 36;
  /** RegularExpression Id. */
  int ET = 37;
  /** RegularExpression Id. */
  int OU = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int MULTIPLICATION = 40;
  /** RegularExpression Id. */
  int DIVISION = 41;
  /** RegularExpression Id. */
  int PUISSANCE = 42;
  /** RegularExpression Id. */
  int LBRACKET = 43;
  /** RegularExpression Id. */
  int RBRACKET = 44;
  /** RegularExpression Id. */
  int COLON = 45;
  /** RegularExpression Id. */
  int IDENTIFIER = 46;
  /** RegularExpression Id. */
  int LETTER = 47;
  /** RegularExpression Id. */
  int DIGIT = 48;
  /** RegularExpression Id. */
  int INTEGER = 49;
  /** RegularExpression Id. */
  int REAL = 50;
  /** RegularExpression Id. */
  int EXPONENT = 51;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"//\"",
    "<token of kind 3>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 8>",
    "<DECL_TYPES>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"bool\"",
    "\"int\"",
    "\"float\"",
    "\"string\"",
    "<ASSIGN_OPERATORS>",
    "<COMPARISON_OPERATORS>",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"+=\"",
    "\"-=\"",
    "\"/=\"",
    "\"*=\"",
    "\"^=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"not\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER>",
    "<REAL>",
    "<EXPONENT>",
  };

}
