import java.util.*;

PARSER_BEGIN(Exercice2)

class Exercice2
{
	Map<String, Boolean> variablesUtilisees = new HashMap<String, Boolean>();
	Vector<String> variablesNonDeclarees = new Vector<String>();

	public static void main(String args[])
	{
		System.out.println("Lecture de l'entree standard...");
		Exercice2 c = new Exercice2(new java.io.DataInputStream(System.in));
		try {
			String rapport = c.Program();
			System.out.println("Fichier analyse avec succes!");
			System.out.println(rapport);
		} catch (Exception e) {
			System.out.println("Erreur: " + '\n' + e);
			System.exit(-1);
		}
	}
}

PARSER_END(Exercice2)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< WHILE: "while" > | 
	< TYPE: < STRING > | < INT > | < FLOAT > | < BOOL > > |
	< #STRING: "string"> |
	< #INT: "int"> |
	< #FLOAT: "float" > |
	< #BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" >
	// A COMPLETER
}

// Operators
TOKEN :
{
	<ASSIGN: < EQUAL > | < PLUSEQUAL > | < MINUSEQUAL > | < POWEQUAL > | < DIVEQUAL > | < FOISEQUAL > > |
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
	
	< #LESS: "<" > | 
	< #LESSEQUAL: "<=" > | 
	< #GREAT: ">" > | 
	< #GREATEQUAL: ">=" > | 
	< #DIFF: "!=" > | 
	< #EQUALEQUAL: "==" > |
	
	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
	< POW: "^" > |
	< AND: "&&" > |
	< OR: "||" > |
	< NOT: "not" > |
	
	< #EQUAL: "=" > |
	< #PLUSEQUAL: "+=" > |
	< #MINUSEQUAL: "-=" > |
	< #POWEQUAL: "^=" > |
	< #DIVEQUAL: "/=" > |
	< #FOISEQUAL: "*=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," >
	// A COMPLETER
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}







//
// SYNTAX ANALYSIS
//

String Program() : { }
{
	Block() <EOF> { return ""; }
	
	// Block() represente un non-terminal.
	// <EOF> represente le terminal indiquant la fin du flot de caracteres.
}

void Block() : { }
{
	(DeclareStmt() ";" )* ( Stmt() )*
}

void Stmt() : { }
{
	
	AssignStmt() ";" |
	IOStmt() ";" |
	WhileStmt() |
	IfStmt() 
	
	
}

void IOStmt() : 
{
	String nomVariable; 
}
{
	<PRINT> "(" CompExpr() ")"  |
	<INPUT> "(" nomVariable = <IDENTIFIER> ")" 
	{ 
		if(variablesUtilisees.containsKey(nomVariable))
		{
			variablesUtilisees.put(nomVariable, 1);
		} 
	}
}


void DeclareStmt() : 
{
	String nomVariable;
}
{
	<TYPE> nomVariable = <IDENTIFIER> { variablesUtilisees.put(nomVariable, 0;) }
	[<ASSIGN> (LOOKAHEAD(2) AssignStmt() | CompExpr() ) ]


void AssignStmt() : {}
{
	(LOOKAHEAD(2) <IDENTIFIER> <ASSIGN>)+ CompExpr()
}

void CompExpr() : {}
{
	AndOrExpr() ( <COMPARE> AndOrExpr() )*
}

void AndOrExpr() : {}
{
	NotExpr() ( ("&&" | "||" ) NotExpr() )*
}

void NotExpr() : {}
{
	("not")* AddExpr()
}

void AddExpr() : {}
{
	MultExpr() ( ("+"|"-") MultExpr() )*
}

void MultExpr() : {}
{
	PowExpr() ( ("*" | "/") PowExpr() )*
}

void PowExpr() : {}
{
	NegExpr() ( "^" NegExpr() )*
}

void NegExpr() : {}
{
	("-")* BasicExpr() 
}

void BasicExpr() : {}
{
	LOOKAHEAD(2) FctStmt() |
	<IDENTIFIER>|
	<INTEGER> | 
	<REAL> | 
	"(" CompExpr() ")"
}

void WhileStmt() : {}
{
	"while" CompExpr() ":" "{" Block() "}"
}

void IfStmt() : {}
{
	"if" CompExpr() ":" "{" Block() "}" ["else" "{" Block() "}"]
}


void FctStmt() : {}
{
	<IDENTIFIER>  "("  CompExpr() ["," CompExpr() ] ")"
}

// Gauche du assign -> non utilise
// Droite ou milieu du assign -> utilise